<% layout("/layouts/boilerplate") -%>

<style>
.profile-update-container {
    max-width: 800px;
    margin: 50px auto;
    background: #1A1A2E;
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    font-family: 'Segoe UI', Tahoma, sans-serif;
}

/* Heading */
.profile-update-container h2 {
    font-weight: 700;
    color:rgb(198, 208, 218);
    padding: 10px 0;
    text-align: center;
    margin-bottom: 1.5rem;
    background: linear-gradient(90deg, #8e00ff, #ff00c8);
}

/* Label styling */
.form-label {
    font-weight: 600;
    margin-bottom: 6px;
    text-align: left;
    color: #899A8C
}

/* Input + Select styling */
.form-control {
    border-radius: 8px;
    padding: 12px;
    border: 1px solid #ccc;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}



.form-control:focus {
    border-color: #89838d;
    box-shadow: 0 0 6px rgba(142, 0, 255, 0.4);
    outline: none;
}

/* Slot input styling */
.slot-input-group .input-group {
    display: flex;
    gap: 10px;
    align-items: center;
}

.slot-input-group .form-control {
    flex: 1;
}

/* Remove slot button */
.slot-input-group .btn.remove-slot {
    width: auto;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 14px;
    background: #ff4d4f;
    color: white;
    border: none;
    box-shadow: none;
    transition: background-color 0.3s ease;
    cursor: pointer;
}

.slot-input-group .btn.remove-slot:hover {
    background: #d9363e;
    box-shadow: 0 4px 12px rgba(217, 54, 62, 0.4);
    transform: none;
}

.add-slot-btn{
    background: #383051;
    color: #899A8C;
    margin-bottom: 5px;
    padding: 15px 20px;
    max-width: none !important;
    border-radius: 21px 5px 21px 5px !important;
}

/* Smaller buttons inside the input group should not transform on hover */
.slot-input-group .btn:hover {
    transform:none;
}

.update-lawyer-form-btn{
    margin: 10px;
     padding: 15px 20px;
    border-radius: 21px 5px 21px 5px !important;
    transition: all 0.3s ease;
}
.update-lawyer-form-btn:hover{
    box-shadow: inset 0 0 5px rgb(215, 190, 190);
    transform:matrix( 1.05, 0, 0, 1.05, 0, 0);
}

.Professional-bio-input::placeholder{
    color: #899A8C;
    font-style: italic;
}

.input-group input, .input {
    width: 100% !important;
    padding: 15px 20px;
    border: 1px solid rgba(191, 164, 164, 0.281) !important;
    border-radius: 21px 5px 21px 5px !important;
    font-size: 16px;
    outline: none;
    background: rgba(255, 255, 255, 0.1);
    color: #241d1d;
    box-shadow: inset 0 0 5px rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
}
</style>

<div class="profile-update-container">
        <h2 class="input p-3 ">Update Lawyer Profile</h2>
    <form method="POST" id="updateForm" action="/api/users/update-lawyer?_method=PUT" class="needs-validation" novalidate>
        <div class="row g-3 input-group">
            <div class="col-md-6 ">
                <label for="specialization" class="form-label">Specialization</label>
                <select id="specialization" name="specialization" class="form-control" required>
                    <option value="">Select Specialization</option>
                    <% const specs = [
                        "Criminal Law","Civil Law","Corporate Law","Family Law",
                        "Intellectual Property","Tax Law","Labor Law","Real Estate Law",
                        "Immigration Law","Other"
                    ]; %>
                    <% specs.forEach(spec => { %>
                        <option value="<%= spec %>" <%= lawyerProfile?.specialization === spec ? 'selected' : '' %>>
                            <%= spec %>
                        </option>
                    <% }) %>
                </select>
                <div class="invalid-feedback">Please select a specialization.</div>
            </div>
            <div class="col-md-6">
                <label for="license-number" class="form-label">License Number</label>
                <input type="text" id="license-number" name="licenseNumber" 
                       class="form-control" 
                       value="<%= lawyerProfile?.licenseNumber || '' %>" 
                       placeholder="Enter license number" required>
                <div class="invalid-feedback">Please enter your license number.</div>
            </div>
        </div>

        <!-- Row: Experience + Fees -->
        <div class="row g-3 mt-2 input-group">
            <div class="col-md-6">
                <label for="experience" class="form-label">Years of Experience</label>
                <input type="number" id="experience" name="experience" 
                       class="form-control" min="0" 
                       value="<%= lawyerProfile?.experience || '' %>" 
                       placeholder="e.g. 5" required>
                <div class="invalid-feedback">Enter your years of experience.</div>
            </div>
            <div class="col-md-6">
                <label for="fees" class="form-label">Consultation Fees </label>
                <input type="number" id="fees" name="fees" class="form-control" min="0"
                       value="<%= lawyerProfile?.fees || '' %>"
                       placeholder="Enter fees" required>
                <div class="invalid-feedback">Please enter your fees.</div>
            </div>
        </div>

        <!-- Row: City + State -->
        <div class="row g-3 mt-2 input-group">
            <div class="col-md-6">
                <label for="city" class="form-label">City</label>
                <input type="text" id="city" name="city" class="form-control"
                       value="<%= lawyerProfile?.city || '' %>"
                       placeholder="Enter your city" required>
                <div class="invalid-feedback">Please enter your city.</div>
            </div>
            <div class="col-md-6">
                <label for="state" class="form-label">State</label>
                <input type="text" id="state" name="state" class="form-control"
                       value="<%= lawyerProfile?.state || '' %>"
                       placeholder="Enter your state" required>
                <div class="invalid-feedback">Please enter your state.</div>
            </div>
        </div>

        <!-- Languages Spoken -->
        <div class="mt-3 input-group">
            <label for="languages" class="form-label">Languages Spoken</label>
            <input type="text" id="languages" name="languagesSpoken" class="form-control"
                   value="<%= lawyerProfile?.languagesSpoken?.join(', ') || '' %>"
                   placeholder="e.g. English, Spanish, Hindi" required>
            <div class="form-text">Separate multiple languages with commas.</div>
            <div class="invalid-feedback">Please enter at least one language.</div>
        </div>

        <!-- Available Slots -->
        <div class="mt-3">
            <label class="form-label">Available Time Slots</label>
            <div id="slots-container">
                <% if (lawyerProfile?.availableSlots && lawyerProfile.availableSlots.length > 0) { %>
                    <% lawyerProfile.availableSlots.forEach((slot, index) => { %>
                        <div class="slot-input-group mb-2">
                            <div class="input-group">
                                <input type="text" name="availableSlots" class="form-control" value="<%= slot %>" placeholder="e.g. 10:00 AM - 12:00 PM" required>
                                <button class="btn remove-slot" type="button" aria-label="Remove time slot">&times;</button>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="slot-input-group mb-2">
                        <div class="input-group">
                            <input type="text" name="availableSlots" class="form-control" placeholder="e.g. 10:00 AM - 12:00 PM" required>
                            <button class="btn remove-slot" type="button" aria-label="Remove time slot">&times;</button>
                        </div>
                    </div>
                <% } %>
            </div>
            <button id="add-slot" class="btn mt-2 add-slot-btn" type="button">Add Another Slot</button>
            <div class="form-text text-white">Add your available time slots for appointments.</div>
        </div>

        <!-- Bio -->
        <div class="mt-3">
            <label for="bio" class="form-label">Professional Bio</label>
            <textarea id="bio" name="bio" class="form-control Professional-bio-input input" rows="4"
                      placeholder="Write a short description about your expertise" required><%= lawyerProfile?.bio || '' %></textarea>
            <div class="invalid-feedback">Please write your bio.</div>
        </div>

        <div class="d-flex justify-content-end">

            <button type="button" id="update-lawyer-form-close-btn" class="btn btn-danger mt-4 update-lawyer-form-btn">Close</button>
            <button type="submit" class="btn btn-success mt-4 update-lawyer-form-btn">Update Profile</button>
        </div>
    </form>
</div>

<script>
(() => {
    'use strict';

    const addSlotBtn = document.getElementById('add-slot');
    const slotsContainer = document.getElementById('slots-container');

    // Helper to create slot input group
    function createSlotInput() {
        const slotGroup = document.createElement('div');
        slotGroup.className = 'slot-input-group mb-2';
        slotGroup.innerHTML = `
            <div class="input-group">
                <input type="text" name="availableSlots" class="form-control" placeholder="e.g. 10:00 AM - 12:00 PM" required>
                <button class="btn remove-slot" type="button" aria-label="Remove time slot">&times;</button>
            </div>
        `;
        // Attach event listener to remove button
        slotGroup.querySelector('.remove-slot').addEventListener('click', () => {
            if (document.querySelectorAll('.slot-input-group').length > 1) {
                slotGroup.remove();
            } else {
                // Clear input if it's last slot
                slotGroup.querySelector('input').value = '';
            }
        });
        return slotGroup;
    }

    // Add new slot input on button click
    addSlotBtn.addEventListener('click', () => {
        const newSlot = createSlotInput();
        slotsContainer.appendChild(newSlot);
    });

    // Attach remove event to all existing remove buttons
    document.querySelectorAll('.remove-slot').forEach(btn => {
        btn.addEventListener('click', function() {
            const slotGroup = this.closest('.slot-input-group');
            if (document.querySelectorAll('.slot-input-group').length > 1) {
                slotGroup.remove();
            } else {
                slotGroup.querySelector('input').value = '';
            }
        });
    });

    // Bootstrap-style form validation
    const forms = document.querySelectorAll('.needs-validation');
    forms.forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add('was-validated');
        });
    });
})();

    
document.getElementById('update-lawyer-form-close-btn').addEventListener('click', () => {
    window.history.back();
});

</script>