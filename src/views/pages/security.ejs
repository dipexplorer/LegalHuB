<% layout("layouts/boilerplate") %>
<link rel="stylesheet" href="/css/security.css">

<main class="security-page"> 
    <div class="security-container">
        <h1 class="page-title"><i class="fas fa-shield-alt"></i> Account Security</h1>
        <p class="page-subtitle">Manage your account password, recovery options, and review active sessions.</p>

        <% if (typeof feedback !== 'undefined') { %>
            <div id="feedback-message" class="toast-alert <%= feedback.type %>" role="alert">
                <%= feedback.message %>
            </div>
        <% } else { %>
            <div id="feedback-message" class="toast-alert hidden" role="alert"></div>
        <% } %>

        <section class="security-card password-management-card">
            <div class="form-wrapper">
            <h2 class="card-title"><i class="fas fa-key icon-left"></i> Change Password</h2>
            
            <form id="change-password-form" action="/account/security/change-password" method="POST" class="needs-validation" novalidate>
                
                <div class="form-group">
                    <label for="currentPassword">Current Password</label>
                    <div class="input-with-icon">
                        <input type="password" id="currentPassword" name="currentPassword" required placeholder="Enter your current password">
                        <i class="fas fa-eye toggle-password"></i>
                    </div>
                    <div class="invalid-feedback">Please enter your current password</div>
                </div>

                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <div class="input-with-icon">
                        <input type="password" id="newPassword" name="newPassword" required placeholder="Create a new password">
                        <i class="fas fa-eye toggle-password"></i>
                    </div>
                    <p class="helper-text">
                         <i class="fas fa-info-circle"></i> Must be 8+ characters, include uppercase, number, and symbol.
                    </p>
                    <div class="password-strength-meter"></div>
                    <div class="invalid-feedback">Please enter a new password</div>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm New Password</label>
                    <div class="input-with-icon">
                        <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Re-enter new password">
                        <i class="fas fa-eye toggle-password"></i>
                    </div>
                    <div class="invalid-feedback">Passwords do not match</div>
                </div>

                <button type="submit" class="submit-btn gradient-btn">Update Password</button>
            </form>
            </div>
        </section>

        <section class="security-card session-management-card">
            <div class="form-wrapper">
            <h2 class="card-title"><i class="fas fa-desktop icon-left"></i> Active Sessions</h2>
            <p class="card-subtitle">Review and manage devices currently logged into your LegalHuB account.</p>

            <ul class="session-list">
                <% if (typeof activeSessions !== 'undefined' && activeSessions.length > 0) { %>
                    <% activeSessions.forEach(session => { %>
                        <li class="session-item <%= session.current ? 'current-session' : '' %>">
                            <div class="session-info">
                                <strong>
                                    <i class="fas fa-<%= session.device && session.device.toLowerCase().includes('mobile') ? 'mobile-alt' : 'desktop' %>"></i>
                                    <%= session.device || 'Unknown Device' %>
                                </strong>
                                <span class="location"><i class="fas fa-map-marker-alt"></i> <%= session.location || 'Unknown Location' %></span>
                            </div>
                            <div class="session-actions">
                                <span class="activity-time">
                                    <%= session.current ? 'Active Now' : 'Last active: ' + session.lastActive.toLocaleString() %>
                                </span>
                                <% if(!session.current) { %>
                                    <form action="/account/security/logout-session/<%= session.id %>" method="POST" style="display: inline;">
                                        <button type="submit" class="revoke-btn">Terminate</button>
                                    </form>
                                <% } %>
                            </div>
                        </li>
                    <% }) %>
                <% } else { %>
                    <li class="no-sessions">No other active sessions detected.</li>
                <% } %>
            </ul>
            
            <form action="/account/security/logout-others" method="POST" class="mt-3">
                <button type="submit" class="submit-btn secondary-gradient-btn">Log Out All Other Sessions</button>
            </form>
            </div>
        </section>

        <section class="security-card notification-card">
             <div class="form-wrapper">
            <h2 class="card-title"><i class="fas fa-bell icon-left"></i> Security Notifications</h2>
            <form action="/account/security/settings" method="POST">
                
                <div class="form-group custom-switch-group"> 
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="newLoginAlert" 
                               name="notifications[newLogin]" 
                               <%= securitySettings.notifications.newLogin ? 'checked' : '' %>>
                        <label class="custom-control-label" for="newLoginAlert">Notify me of new device logins</label>
                    </div>
                </div>
                <div class="form-group custom-switch-group">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="passwordChangeAlert" 
                               name="notifications[passwordChange]" 
                               <%= securitySettings.notifications.passwordChange ? 'checked' : '' %>>
                        <label class="custom-control-label" for="passwordChangeAlert">Notify me when my password is changed</label>
                    </div>
                </div>
                <div class="form-group custom-switch-group">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="twoFactorAlert" 
                               name="notifications[twoFactorChange]" 
                               <%= securitySettings.notifications.twoFactorChange ? 'checked' : '' %>>
                        <label class="custom-control-label" for="twoFactorAlert">Alert me for changes to Two-Factor Authentication</label>
                    </div>
                </div>
                
                <button type="submit" class="submit-btn gradient-btn">Update Notification Settings</button>
            </form>
        </div>
        </section>
        
        <section class="security-card recovery-card">
             <div class="form-wrapper">
            <h2 class="card-title"><i class="fas fa-life-ring icon-left"></i> Account Recovery</h2>
            <form action="/account/security/settings" method="POST" class="needs-validation" novalidate>
                <div class="form-group">
                    <label for="recoveryEmail">Recovery Email</label>
                    <div class="input-with-icon">
                        <input type="email" id="recoveryEmail" name="recoveryEmail" required 
                               value="<%= securitySettings.recoveryEmail || '' %>" placeholder="Enter a recovery email">
                        <i class="fas fa-envelope toggle-password" style="cursor: default;"></i>
                    </div>
                    <div class="invalid-feedback">Please enter a valid email address</div>
                </div>
                <div class="form-group">
                    <label for="recoveryPhone">Recovery Phone</label>
                    <div class="input-with-icon">
                        <input type="tel" id="recoveryPhone" name="recoveryPhone" required 
                               value="<%= securitySettings.recoveryPhone || '' %>" placeholder="Enter a recovery phone number">
                        <i class="fas fa-phone toggle-password" style="cursor: default;"></i>
                    </div>
                    <div class="invalid-feedback">Please enter a valid phone number</div>
                </div>
                <button type="submit" class="submit-btn gradient-btn">Update Recovery Info</button>
            </form>
            </div>
        </section>

    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- 1. UX Improvement: Toggle password visibility ---
        document.querySelectorAll('.input-with-icon .toggle-password').forEach(icon => {
            const input = icon.previousElementSibling;
            if (input && input.getAttribute('type') === 'password') {
                icon.style.cursor = 'pointer'; 
                icon.addEventListener('click', () => {
                    const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                    input.setAttribute('type', type);
                    icon.classList.toggle('fa-eye');
                    icon.classList.toggle('fa-eye-slash');
                });
            }
        });

        // --- 2. Password Strength Meter Logic ---
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const strengthMeter = document.querySelector('.password-strength-meter');

        if (newPasswordInput && strengthMeter) {
            newPasswordInput.addEventListener('input', function() {
                const password = this.value;
                let strength = 0;
                let feedback = [];

                if (password.length >= 8) strength++; else feedback.push("8+ characters");
                if (/[A-Z]/.test(password)) strength++; else feedback.push("uppercase");
                if (/[a-z]/.test(password)) strength++; else feedback.push("lowercase");
                if (/[0-9]/.test(password)) strength++; else feedback.push("number");
                if (/[^A-Za-z0-9]/.test(password)) strength++; else feedback.push("special character");

                let strengthText = '';
                let strengthClass = '';
                
                switch(strength) {
                    case 0:
                    case 1: strengthText = 'Weak'; strengthClass = 'weak'; break;
                    case 2:
                    case 3: strengthText = 'Medium'; strengthClass = 'medium'; break;
                    case 4: strengthText = 'Strong'; strengthClass = 'strong'; break;
                    case 5: strengthText = 'Very Strong'; strengthClass = 'very-strong'; break;
                }

                strengthMeter.className = 'password-strength-meter ' + strengthClass;
                strengthMeter.innerHTML = `
                    <div class="strength-text">${strengthText}</div>
                    ${feedback.length ? `<div class="feedback">Add: ${feedback.join(', ')}</div>` : ''}
                `;
            });
        }

        // --- 3. Confirm password validation ---
        if (newPasswordInput && confirmPasswordInput) {
            confirmPasswordInput.addEventListener('input', function() {
                if (this.value !== newPasswordInput.value) {
                    this.setCustomValidity('Passwords do not match');
                } else {
                    this.setCustomValidity('');
                }
            });
        }

        // --- 4. Form validation ---
        const forms = document.querySelectorAll('.needs-validation');
        forms.forEach(form => {
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            });
        });
    });
</script>