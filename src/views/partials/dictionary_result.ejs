<!-- src/views/partials/dictionary_result.ejs -->
<article
  class="ld-card"
  role="article"
  aria-live="polite"
  aria-labelledby="term-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>"
>
  <div class="card__header">
    <div style="flex:1;min-width:0">
      <h2
        id="term-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>"
        class="card__term-title"
      >
        <%= escapeHtml ? escapeHtml(structured.term) : structured.term %>
      </h2>

      <div class="card__badge-list" aria-hidden="true">
        <% if (structured.types && structured.types.length) { %>
          <% structured.types.forEach(function(t){ %>
            <span class="card__badge" title="<%= escapeHtml ? escapeHtml(typeof t === 'string' ? t : (t.name || JSON.stringify(t))) : (typeof t === 'string' ? t : (t.name || JSON.stringify(t))) %>">
              <%= escapeHtml ? escapeHtml(typeof t === 'string' ? t : (t.name || JSON.stringify(t))) : (typeof t === 'string' ? t : (t.name || JSON.stringify(t))) %>
            </span>
          <% }) %>
        <% } else { %>
          <span class="card__badge">Law</span>
          <span class="card__badge">AI-generated</span>
        <% } %>
      </div>
    </div>

    <div class="card__actions" role="group" aria-label="Result actions">
      <!-- COPY definition: note data-def is a simple fallback; JS builds a fuller fallback if needed -->
      <button
        type="button"
        class="icon-btn icon-btn--copy js-copy-def"
        title="Copy definition"
        aria-label="Copy definition"
        data-term="<%= escapeHtml ? escapeHtml(structured.term) : structured.term %>"
        data-def="<%= escapeHtml ? escapeHtml(((structured.definition||structured.raw||'')).replace(/<\/?[^>]+(>|$)/g, ' ')) : ((structured.definition||structured.raw||'').replace(/<\/?[^>]+(>|$)/g, ' ')) %>"
      >
        <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M16 1H4a1 1 0 0 0-1 1v14h2V3h11V1zM20 5H8a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1zm-1 16H9V7h10v14z" fill="currentColor"/></svg>
      </button>

      <!-- Save -->
      <button
        type="button"
        class="icon-btn icon-btn--save js-save-term"
        data-term="<%= escapeHtml ? escapeHtml(structured.term) : structured.term %>"
        title="<%= user ? 'Save to My Dictionary' : 'Login to save' %>"
        <%= user ? '' : 'disabled' %>
        aria-pressed="<%= typeof userSaved !== 'undefined' ? (userSaved ? 'true' : 'false') : 'false' %>"
      >
        <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M6 2h10a1 1 0 0 1 1 1v18l-6-3-6 3V3a1 1 0 0 1 1-1z" fill="currentColor"/></svg>
      </button>

      <!-- Share (only share, no download) -->
      <button
        type="button"
        class="icon-btn icon-btn--share js-share-term"
        id="js-share-term-<%= (escapeHtml ? escapeHtml(structured.term) : structured.term).replace(/\s+/g,'-') %>"
        data-term="<%= escapeHtml ? escapeHtml(structured.term) : structured.term %>"
        title="Share this term"
        aria-label="Share this term"
      >
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true" focusable="false"><path d="M4 12v7a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-7" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><path d="M16 6l-4-4-4 4" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 2v13" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg>
      </button>
    </div>
  </div>

  <% if (typeof meta !== 'undefined' && meta && meta.aiMeta) { %>
    <div class="card__ai-banner" role="status" aria-live="polite" style="margin-top:12px">
      <% const ai = meta.aiMeta; %>
      <% if (ai.usedCacheFallback) { %>
        <div class="ai-banner ai-banner--warn">‚ö†Ô∏è Using cached result ‚Äî AI temporarily unavailable. <small>(Cached at <%= escapeHtml ? escapeHtml((structured._cachedAt || '').toString()) : (structured._cachedAt || '') %>)</small></div>
      <% } else if (ai.aiError) { %>
        <div class="ai-banner ai-banner--warn">‚ö†Ô∏è AI notice: <%= escapeHtml ? escapeHtml(String(ai.aiError)) : String(ai.aiError) %>. Showing best available result.</div>
      <% } else if (ai.attempts) { %>
        <div class="ai-banner ai-banner--ok">üß† Definition generated by AI (attempts: <%= escapeHtml ? escapeHtml(String(ai.attempts)) : String(ai.attempts) %>).</div>
      <% } %>
    </div>
  <% } %>

  <!-- Definition -->
  <section class="card__section" aria-labelledby="def-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
    <h3 id="def-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Definition</h3>
    <div class="card__section-body">
      <% if (typeof definitionHtml !== 'undefined' && definitionHtml) { %>
        <div class="definition-content" data-raw="true"><%- definitionHtml %></div>
      <% } else { %>
        <div class="definition-content" data-raw="false"><%= escapeHtml ? escapeHtml(structured.definition || structured.raw || '') : (structured.definition || structured.raw || '') %></div>
      <% } %>
    </div>
  </section>

  <!-- Key Aspects -->
  <% if ((typeof aspectsHtml !== 'undefined' && aspectsHtml && aspectsHtml.trim()) || (structured.keyAspects && structured.keyAspects.length)) { %>
    <section class="card__section" aria-labelledby="aspects-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
      <h3 id="aspects-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Key Aspects</h3>
      <div class="card__section-body">
        <% if (typeof aspectsHtml !== 'undefined' && aspectsHtml && aspectsHtml.trim()) { %>
          <div class="aspects-rendered"><%- aspectsHtml %></div>
        <% } else { %>
          <ol class="card__ordered-list">
            <% structured.keyAspects.forEach(function(a){ %>
              <li style="margin-bottom:8px;">
                <% if (typeof a === 'string') { %>
                  <div><%= escapeHtml ? escapeHtml(a) : a %></div>
                <% } else { %>
                  <div><strong><%= escapeHtml ? escapeHtml(a.description || a.name || JSON.stringify(a)) : (a.description || a.name || JSON.stringify(a)) %></strong></div>
                  <% if (a.jurisdiction) { %>
                    <div><em>Jurisdiction:</em> <%= escapeHtml ? escapeHtml(a.jurisdiction) : a.jurisdiction %></div>
                  <% } %>
                  <% if (a.types && a.types.length) { %>
                    <ul>
                      <% a.types.forEach(function(t){ %>
                        <li><strong><%= escapeHtml ? escapeHtml((typeof t === 'string' ? t : (t.name || ''))) : (typeof t === 'string' ? t : (t.name || '')) %>:</strong> <%= escapeHtml ? escapeHtml(t.description || '') : (t.description || '') %></li>
                      <% }) %>
                    </ul>
                  <% } %>
                <% } %>
              </li>
            <% }) %>
          </ol>
        <% } %>
      </div>
    </section>
  <% } %>

  <!-- Examples -->
  <% if ((typeof examplesHtml !== 'undefined' && examplesHtml && examplesHtml.trim()) || (structured.examples && structured.examples.length)) { %>
    <section class="card__section" aria-labelledby="examples-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
      <h3 id="examples-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Examples</h3>
      <div class="card__section-body">
        <% if (typeof examplesHtml !== 'undefined' && examplesHtml && examplesHtml.trim()) { %>
          <div class="examples-rendered"><%- examplesHtml %></div>
        <% } else { %>
          <% structured.examples.forEach(function(x){ %>
            <div class="card__example">
              <% if (typeof x === 'string') { %>
                <%= escapeHtml ? escapeHtml(x) : x %>
              <% } else { %>
                <%= escapeHtml ? escapeHtml(x.description || x.text || JSON.stringify(x)) : (x.description || x.text || JSON.stringify(x)) %>
              <% } %>
            </div>
          <% }) %>
        <% } %>
      </div>
    </section>
  <% } %>

  <!-- Step-by-step (collapsible) -->
  <% const steps = (typeof stepByStep !== 'undefined' && Array.isArray(stepByStep) && stepByStep.length) ? stepByStep : (structured.stepByStep || []); %>
  <% if (steps && steps.length) { %>
    <section class="card__section card__collapsible" aria-labelledby="steps-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
      <h3 id="steps-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Step-by-step</h3>
      <div class="card__section-body">
        <details class="steps-details">
          <summary>
            <span>Show steps</span>
            <span class="chev">‚ñæ</span>
          </summary>
          <div class="steps-list" style="padding:12px 0;">
            <ol>
              <% steps.forEach(function(s){ %>
                <li style="margin-bottom:8px;"><%= escapeHtml ? escapeHtml(s) : s %></li>
              <% }) %>
            </ol>
          </div>
        </details>
      </div>
    </section>
  <% } %>

  <!-- Notes -->
  <% if ((typeof notes !== 'undefined' && notes && String(notes).trim()) || structured.notes) { %>
    <section class="card__section" aria-labelledby="notes-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
      <h3 id="notes-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Notes</h3>
      <div class="card__section-body">
        <div class="card__notes">
          <% if (typeof notes !== 'undefined' && notes && String(notes).trim()) { %>
            <div class="notes__box"><%- notes %></div>
          <% } else { %>
            <div class="notes__box"><%= escapeHtml ? escapeHtml(structured.notes) : structured.notes %></div>
          <% } %>
        </div>
      </div>
    </section>
  <% } %>

  <!-- Related Terms -->
  <% const rels = (typeof relatedTerms !== 'undefined' && Array.isArray(relatedTerms) && relatedTerms.length) ? relatedTerms : (structured.relatedTerms || []); %>
  <% if (rels && rels.length) { %>
    <section class="card__section" aria-labelledby="related-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>">
      <h3 id="related-title-<%= escapeHtml ? escapeHtml(structured.term).replace(/\s+/g,'-') : structured.term.replace(/\s+/g,'-') %>" class="card__section-title">Related terms</h3>
      <div class="card__section-body">
        <div class="card__related">
          <% rels.forEach(function(r){ %>
            <button class="related-chip" type="button" data-term="<%= escapeHtml ? escapeHtml(r) : r %>"><%= escapeHtml ? escapeHtml(r) : r %></button>
          <% }) %>
        </div>
      </div>
    </section>
  <% } %>

  <!-- Share dialog popup (improved UI) -->
<dialog
  class="share-dialog"
  id="share-dialog-<%= (escapeHtml ? escapeHtml(structured.term) : structured.term).replace(/\s+/g,'-') %>"
  role="dialog"
  aria-modal="true"
  aria-labelledby="share-title-<%= (escapeHtml ? escapeHtml(structured.term) : structured.term).replace(/\s+/g,'-') %>"
>
  <div class="share-dialog__content">
    <div class="share-dialog__header">
      <h4
        id="share-title-<%= (escapeHtml ? escapeHtml(structured.term) : structured.term).replace(/\s+/g,'-') %>"
        class="share-dialog__title"
      >
        Share ‚Äú<%= escapeHtml ? escapeHtml(structured.term) : structured.term %>‚Äù
      </h4>

      <button type="button" class="share-dialog__close" aria-label="Close share dialog">&times;</button>
    </div>

    <p class="muted-note" style="margin:0;">Copy the link below or share directly:</p>

    <input
      type="text"
      readonly
      value="<%= typeof baseUrl !== 'undefined' ? (baseUrl + '/dictionary?term=' + encodeURIComponent(structured.term)) : ('/dictionary?term=' + encodeURIComponent(structured.term)) %>"
      class="share-link"
      onclick="this.select()"
    />

    <div class="share-buttons">
      <button type="button" class="share-btn js-copy-share" data-term="<%= escapeHtml ? escapeHtml(structured.term) : structured.term %>">Copy Link</button>

      <button
        type="button"
        class="share-btn"
        onclick="window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent('Check out this legal term: <%= escapeHtml ? escapeHtml(structured.term) : structured.term %> ‚Äî ' + (location.origin + location.pathname)))"
      >
        Twitter
      </button>

      <button type="button" class="share-btn share-btn--close" aria-label="Close">Close</button>
    </div>
  </div>
</dialog>


  <script>
    (function () {
      // small helper toast (matches CSS .ld-toast if present)
      function showToast(msg, short) {
        var t = document.getElementById('lh-toast');
        if (!t) {
          t = document.createElement('div'); t.id = 'lh-toast';
          t.className = 'ld-toast';
          document.body.appendChild(t);
        }
        t.textContent = msg;
        t.classList.add('visible');
        setTimeout(function(){ t.classList.remove('visible'); }, short ? 900 : 2000);
      }

      // text-only highlight for term occurrences
      function highlightTerm(container, term) {
        if (!container || !term) return;
        try {
          var walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT, null, false);
          var nodes = [];
          while(walker.nextNode()) nodes.push(walker.currentNode);
          var re = new RegExp('(' + term.replace(/[-/\\^$*+?.()|[\\]{}]/g, '\\$&') + ')', 'ig');
          nodes.forEach(function(n){
            if (!n.nodeValue || !re.test(n.nodeValue)) return;
            var span = document.createElement('span');
            var parts = n.nodeValue.split(re);
            for (var i=0;i<parts.length;i++){
              if (re.test(parts[i])){
                var hi = document.createElement('span'); hi.className = 'term-highlight'; hi.textContent = parts[i]; span.appendChild(hi);
              } else { span.appendChild(document.createTextNode(parts[i])); }
            }
            n.parentNode.replaceChild(span, n);
          });
        } catch(e){ /* ignore */ }
      }

      // COPY definition: improved fallback assembly
      document.querySelectorAll('.js-copy-def').forEach(function(btn){
        btn.addEventListener('click', function(){
          // Try the data-def first (server-provided cleaned text)
          var text = (btn.getAttribute('data-def') || '').trim();

          // If not available, build fallback from visible parts of the card
          if (!text) {
            var card = btn.closest('.ld-card');
            if (card) {
              var parts = [];
              var term = card.querySelector('.card__term-title');
              if (term) parts.push(term.innerText.trim());
              var defEl = card.querySelector('.definition-content');
              if (defEl) parts.push(defEl.innerText.trim());
              // key aspects
              var aspects = [];
              card.querySelectorAll('.card__ordered-list li').forEach(function(li){
                var txt = li.innerText.trim();
                if (txt) aspects.push(txt.replace(/\s+/g,' '));
              });
              if (aspects.length) parts.push('Key aspects: ' + aspects.join(' ‚Ä¢ '));
              // examples
              var examples = [];
              card.querySelectorAll('.card__example').forEach(function(x){ var v = x.innerText.trim(); if (v) examples.push(v);});
              if (examples.length) parts.push('Examples: ' + examples.join(' ‚Ä¢ '));
              // notes
              var notes = card.querySelector('.notes__box');
              if (notes && notes.innerText.trim()) parts.push('Notes: ' + notes.innerText.trim());

              text = parts.filter(Boolean).join('\n\n').trim();
            }
          }

          if (!text) return showToast('Nothing to copy');

          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(text).then(function(){ showToast('Copied to clipboard'); });
          } else {
            try {
              var ta = document.createElement('textarea'); ta.value = text; document.body.appendChild(ta); ta.select();
              document.execCommand('copy'); ta.remove(); showToast('Copied to clipboard');
            } catch(e){ showToast('Copy failed'); }
          }
        });
      });

      // SAVE term
      document.querySelectorAll('.js-save-term').forEach(function(btn){
        btn.addEventListener('click', function(){
          var term = btn.getAttribute('data-term');
          if (!term) return;
          btn.disabled = true;
          fetch('/dictionary/save', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({term: term})})
            .then(function(r){ return r.json().then(function(j){ return {status: r.status, json: j}; }); })
            .then(function(res){
              if (res.status === 401) { showToast('Please log in to save'); }
              else if (res.json && res.json.ok) { btn.textContent = 'Saved ‚úÖ'; btn.setAttribute('aria-pressed','true'); showToast('Saved'); }
              else showToast(res.json && res.json.message ? res.json.message : 'Could not save');
            })
            .catch(function(){ showToast('Network error'); })
            .finally(function(){ btn.disabled = false; });
        });
      });

      // SHARE: web share API -> dialog -> clipboard fallback
      document.querySelectorAll('.js-share-term').forEach(function(btn){
        btn.addEventListener('click', function(){
          var term = btn.getAttribute('data-term') || '';
          var url = window.location.origin + '/dictionary?term=' + encodeURIComponent(term);
          if (navigator.share) {
            navigator.share({title: term, text: 'Definition from LegalHuB: ' + term, url: url}).catch(function(){/*ignore*/});
            return;
          }
          var id = 'share-dialog-' + term.replace(/\s+/g,'-');
          var dialog = document.getElementById(id);
          if (dialog && typeof dialog.showModal === 'function') {
            var input = dialog.querySelector('.share-link');
            if (input && input.value.indexOf('/dictionary') === 0) input.value = window.location.origin + input.value;
            dialog.showModal();
            return;
          }
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(url).then(function(){ showToast('Share link copied'); });
          } else {
            try { var ta = document.createElement('textarea'); ta.value = url; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); ta.remove(); showToast('Share link copied'); } catch(e){ showToast('Unable to copy'); }
          }
        });
      });

      // copy link from dialog
      document.querySelectorAll('.js-copy-share').forEach(function(btn){
        btn.addEventListener('click', function(){
          var form = btn.closest('form'); if (!form) return;
          var input = form.querySelector('.share-link'); if (!input) return;
          var text = input.value;
          if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(text).then(function(){ var prev = btn.textContent; btn.textContent = 'Copied!'; setTimeout(function(){ btn.textContent = prev; },1500); });
          } else { try { input.select(); document.execCommand('copy'); var prev2 = btn.textContent; btn.textContent = 'Copied!'; setTimeout(function(){ btn.textContent = prev2; },1500); } catch(e){} }
        });
      });

      // related chips -> re-search
      document.querySelectorAll('.related-chip').forEach(function(chip){
        chip.addEventListener('click', function(){
          var term = chip.getAttribute('data-term'); if (!term) return;
          var form = document.querySelector('#dictionary-search-form');
          if (form) {
            var input = form.querySelector('input[name="term"]'); if (input) { input.value = term; form.dispatchEvent(new Event('submit', {cancelable:true, bubbles:true})); return; }
          }
          window.location.href = '/dictionary?term=' + encodeURIComponent(term);
        });
      });

      // highlight searched term in definition
      try {
        var termValue = <%- JSON.stringify(structured.term || '') %>;
        var defEl = document.querySelector('.ld-card .definition-content');
        if (defEl && termValue) highlightTerm(defEl, termValue);
      } catch(e){ /* ignore */ }

    })();
  </script>
</article>
