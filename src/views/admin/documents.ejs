<%- layout("/layouts/boilerplate") -%>
<style>
  :root {
  --bg: #0b1220;
  --panel: #101a2f;
  --muted: #c0c8d8; /* lightened for better contrast */
  --text: #eef2f7;
  --primary: #6e8bff;
  --primary-600: #5e7af0;
  --success: #22c55e;
  --danger: #ef4444;
  --border: #1d2a42;
  --chip: #1c2f55;
  --chip-text: #d4e2ff;
  --card-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
}

/* LINKS */
a { color: inherit; text-decoration: none; transition: 0.2s; }
a:hover { color: var(--primary); }

/* CONTAINER */
.container { max-width: 1250px; margin: 20px auto; padding: 20px; }

/* HEADER */
.header {
  display: flex;
  /* flex-wrap: wrap; */
  justify-content: space-between; align-items: center;
  gap: 14px; margin-bottom: 18px;
  padding: 12px 16px;
  border-radius: 12px;
  background: rgba(16, 26, 47, 0.95);
  border: 1px solid var(--border);
  box-shadow: var(--card-shadow);
  position: sticky; top: 0; z-index: 10;
}
.title h1 { 
  font-size: 22px;
  font-weight: 700;
  margin: .5rem;
  color: #adadad;
}
.toolbar {
  display: flex; gap: 10px; flex-wrap: wrap; align-items: center;
}

/* INPUTS */
.input, select, textarea {
  background: #0f1b34;
  border: 1px solid var(--border);
  color: var(--text);
  padding: 10px 12px;
  border-radius: 8px;
  font-size: 14px;
  transition: 0.25s;
}
.input:focus, select:focus, textarea:focus {
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(110, 139, 255, 0.25);
  outline: 2px solid var(--primary);
  outline-offset: 2px;
}

/* BUTTONS */
.btn {
  border: 1px solid var(--border);
  border-radius: 8px;
  padding: 9px 14px;
  font-weight: 600;
  cursor: pointer;
  background: #111b31;
  color: var(--text);
  transition: all 0.25s;
}
.btn:hover { transform: translateY(-1px); }
.btn-primary {
  background: linear-gradient(180deg, var(--primary), var(--primary-600));
  border-color: var(--primary-600); color: #fff;
}
.btn-success {
  background: linear-gradient(180deg, #2cd56f, #20b95f);
  border-color: #15944a; color: #fff;
}
.btn-danger {
  background: linear-gradient(180deg, #ff5f5f, #e73c3c);
  border-color: #c92a2a; color: #fff;
}
.btn[disabled] { opacity: 0.6; cursor: not-allowed; }

/* CARDS */
.card {
  background: var(--panel);
  border-radius: 12px;
  padding: 18px;
  color: #d3d3d3;
  border: 1px solid var(--border);
  box-shadow: var(--card-shadow);
}

/* STATS */
.stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 14px;
  margin-bottom: 16px;
}
.stat { display: flex; gap: 12px; align-items: center; }
.stat .icon {
  width: 44px; height: 44px;
  border-radius: 10px;
  display: grid; place-items: center;
  background: #17283f;
  border: 1px solid var(--border);
  font-size: 18px;
}
.kpi { font-size: 20px; font-weight: 700; }
.muted { color: var(--muted); font-size: 13px; }

/* TABLE */
.table-wrap { overflow-x: auto; border-radius: 12px; }
table {
  width: 100%;
  border-collapse: collapse;
  font-size: 14px;
}
thead th {
  background: #0a152b;
  padding: 12px 14px;
  text-align: left;
  font-weight: 700;
  border-bottom: 1px solid var(--border);
}
tbody td {
  padding: 12px 14px;
  border-bottom: 1px solid var(--border);
}
tbody tr { cursor: pointer; }
tbody tr:hover { background: #12213d; }
.actions {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  flex-wrap: wrap;
}
.table-empty {
  text-align: center;
  padding: 32px;
  font-size: 15px;
  color: var(--muted);
}

/* CHIPS */
.chip {
  background: var(--chip);
  color: var(--chip-text);
  padding: 5px 11px;
  border-radius: 999px;
  font-size: 13px;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  gap: 6px;
}

/* PAGINATION */
.pagination {
  display: flex; gap: 8px;
  justify-content: flex-end; align-items: center;
  margin-top: 14px; padding-top: 12px;
  border-top: 1px solid var(--border);
}
.page-btn {
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid var(--border);
  background: var(--panel);
  color: var(--text);
  cursor: pointer;
}
.page-btn.active { background: var(--primary); color: #fff; border: none; }
.page-btn[disabled] { opacity: 0.5; cursor: not-allowed; }

/* PANELS */
.panel {
  display: grid;
  grid-template-columns: 1.1fr 0.9fr;
  gap: 20px;
  margin-top: 20px;
}
.form-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
}
.col-span-2 { grid-column: span 2; }

/* MODAL */
.modal {
  position: fixed; inset: 0;
  display: none;
  align-items: center; justify-content: center;
  background: rgba(5,10,20,0.75);
  z-index: 100;
}
.modal.open { display: flex; }
.modal-card {
  background: var(--panel);
  color: #a7a7a7;
  border-radius: 12px;
  padding: 20px;
  border: 1px solid var(--border);
  width: min(750px, 95%);
  max-height: 85vh;
  overflow-y: auto;
  box-shadow: var(--card-shadow);
}
.modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 14px; }

/* TOAST */
.toast-container {
  position: fixed;
  right: 20px; bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  z-index: 200;
}
.toast {
  background: #0f1b34;
  border: 1px solid var(--border);
  color: #fff;
  padding: 12px 14px;
  border-radius: 8px;
  box-shadow: var(--card-shadow);
  opacity: 0;
  transform: translateY(8px);
  transition: .3s;
}
.toast.show { opacity: 1; transform: translateY(0); }

/* HIGHLIGHT row after update */
.highlight { background: rgba(110,139,255,0.15) !important; transition: background 0.6s ease; }

/* RESPONSIVE */
@media (max-width: 980px) {
  .panel { grid-template-columns: 1fr; }
}
@media (max-width: 640px) {
  .toolbar { flex-direction: column; align-items: stretch; }
  table, thead, tbody, tr, th, td { display: block; }
  thead { display: none; }
  tr {
    margin-bottom: 12px;
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 8px 10px;
    background: #101a2f;
  }
  td {
    padding: 6px 0;
    text-align: right;
    position: relative;
  }
  td::before {
    content: attr(data-label);
    position: absolute;
    left: 0;
    font-weight: 600;
    color: var(--muted);
    text-align: left;
  }
  .actions { justify-content: flex-start; }
}

/* Form field adjustments */
.panel .card form .input,
.panel .card form textarea,
.panel .card form select {
  width: 100%;
  box-sizing: border-box;
  min-width: 0;
}
.panel .card form textarea {
  min-height: 110px;
  resize: vertical;
}
@media (max-width: 720px) {
  .panel .card .form-grid { grid-template-columns: 1fr; }
}

/* Screen reader only (for labels) */
.sr-only {
  position: absolute;
  width: 1px; height: 1px;
  padding: 0; margin: -1px;
  overflow: hidden; clip: rect(0,0,0,0);
  border: 0;
}
</style>

<% // safe fallbacks
   const docs = (typeof documents !== 'undefined' && Array.isArray(documents)) ? documents : [];
   const paginationSafe = (typeof pagination !== 'undefined') ? pagination : { totalDocs: docs.length, totalPages: 1, currentPage: 1, limit: 10 };
   const filtersSafe = (typeof filters !== 'undefined') ? filters : { q: '', state: '', dept: '', sort: 'createdAt_desc' };
   const statesSafe = (typeof states !== 'undefined' && Array.isArray(states)) ? states : [];
   const deptsSafe = (typeof depts !== 'undefined' && Array.isArray(depts)) ? depts : [];
%>

<div class="container">
  <!-- Header -->
  <div class="header">
    <div class="title">
      <h1>Admin Document Dashboard</h1>
      <div style="margin-left:8px" class="chip"><%= paginationSafe.totalDocs %> total</div>
    </div>

    <form id="filterForm" class="toolbar" action="/api/admin/dashboard/documents" method="GET">
      <label for="search" class="sr-only">Search documents</label>
      <input id="search" class="input" name="q" placeholder="Search title / dept / description…" value="<%= filtersSafe.q || '' %>" style="min-width:220px;">
      
      <select name="state" class="input" style="min-width:160px;">
        <option value="">All States</option>
        <% (statesSafe || []).forEach(s => { %>
          <option value="<%= s %>" <%= (filtersSafe.state===s) ? 'selected' : '' %>><%= s %></option>
        <% }) %>
      </select>

      <select name="dept" class="input" style="min-width:160px;">
        <option value="">All Departments</option>
        <% (deptsSafe || []).forEach(d => { %>
          <option value="<%= d %>" <%= (filtersSafe.dept===d) ? 'selected' : '' %>><%= d %></option>
        <% }) %>
      </select>

      <select name="sort" class="input" style="min-width:160px;">
        <option value="createdAt_desc" <%= filtersSafe.sort === 'createdAt_desc' ? 'selected' : '' %>>Newest First</option>
        <option value="createdAt_asc"  <%= filtersSafe.sort === 'createdAt_asc' ? 'selected' : '' %>>Oldest First</option>
        <option value="title_asc"      <%= filtersSafe.sort === 'title_asc' ? 'selected' : '' %>>Title A–Z</option>
        <option value="title_desc"     <%= filtersSafe.sort === 'title_desc' ? 'selected' : '' %>>Title Z–A</option>
        <option value="downloads_desc" <%= filtersSafe.sort === 'downloads_desc' ? 'selected' : '' %>>Most Downloads</option>
        <option value="downloads_asc"  <%= filtersSafe.sort === 'downloads_asc' ? 'selected' : '' %>>Least Downloads</option>
        <option value="updated_desc"   <%= filtersSafe.sort === 'updated_desc' ? 'selected' : '' %>>Recently Updated</option>
        <option value="updated_asc"    <%= filtersSafe.sort === 'updated_asc' ? 'selected' : '' %>>Least Recently Updated</option>
      </select>

      <select name="limit" class="input" style="min-width:100px;">
        <option value="5"  <%= paginationSafe.limit==5 ? 'selected' : '' %>>5 / page</option>
        <option value="10" <%= paginationSafe.limit==10 ? 'selected' : '' %>>10 / page</option>
        <option value="25" <%= paginationSafe.limit==25 ? 'selected' : '' %>>25 / page</option>
        <option value="50" <%= paginationSafe.limit==50 ? 'selected' : '' %>>50 / page</option>
      </select>

      <button class="btn btn-ghost" type="submit">🔍 Apply</button>
      <button class="btn btn-primary" id="exportCsv" type="button">⬇ Export CSV</button>
      <button class="btn" id="clearFilters" type="button">Clear</button>
    </form>
  </div>

  <!-- Stats -->
  <% const totalDownloads = docs.reduce((s,d)=>s+(d.downloadCount||0),0);
     const latest = (docs.length ? (docs.map(d=>d.updatedAt||d.createdAt).sort((a,b)=>new Date(b)-new Date(a))[0]) : null);
     const statesCovered = new Set((docs||[]).map(d=>d.state)).size;
  %>
  <div class="stats">
    <div class="card stat"><div class="icon">📄</div><div><div class="muted">Showing</div><div class="kpi"><%= docs.length %></div></div></div>
    <div class="card stat"><div class="icon">⬇️</div><div><div class="muted">Downloads (page)</div><div class="kpi"><%= totalDownloads %></div></div></div>
    <div class="card stat"><div class="icon">🕒</div><div><div class="muted">Last Updated</div><div class="kpi"><%= latest ? new Date(latest).toLocaleString() : '—' %></div></div></div>
    <div class="card stat"><div class="icon">🌐</div><div><div class="muted">States Covered (page)</div><div class="kpi"><%= statesCovered %></div></div></div>
  </div>

  <!-- Table -->
  <div class="table-wrap card">
    <table id="docTable">
      <thead>
        <tr>
          <th style="width:34%">Title & description</th>
          <th style="width:18%">Department</th>
          <th style="width:12%">State</th>
          <th style="width:8%">Downloads</th>
          <th style="width:10%">Created</th>
          <th style="text-align:right;width:18%">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% if (docs && docs.length){ docs.forEach(doc => { %>
          <tr data-id="<%= doc._id %>">
            <td data-label="Title">
              <div><span class="chip state-badge"><%= doc.title %></span></div>
              <div class="hint"><%= (doc.description||'').slice(0,140) %><%= (doc.description||'').length>140 ? '…' : '' %></div>
            </td>
            <td data-label="Department"><span class="chip"><%= doc.department %></span></td>
            <td data-label="State"><span class="chip"><%= doc.state %></span></td>
            <td data-label="Downloads"><strong><%= doc.downloadCount || 0 %></strong></td>
            <td data-label="Created"><%= new Date(doc.createdAt).toLocaleDateString() %></td>
            <td data-label="Actions">
              <div class="actions">
                <button class="btn" type="button" data-preview
                  data-title="<%= encodeURIComponent(doc.title) %>"
                  data-desc="<%= encodeURIComponent(doc.description||'') %>"
                  data-guidelines="<%= encodeURIComponent((doc.guidelines||[]).join('||')) %>"
                  data-reqdocs="<%= encodeURIComponent((doc.requiredDocuments||[]).join('||')) %>"
                  data-download="<%= encodeURIComponent(doc.downloadLink||'') %>"
                  data-apply="<%= encodeURIComponent(doc.applyLink||'') %>">
                  👁 View
                </button>

                <button class="btn btn-success" type="button" data-edit
                  data-id="<%= doc._id %>"
                  data-title="<%= encodeURIComponent(doc.title) %>"
                  data-desc="<%= encodeURIComponent(doc.description||'') %>"
                  data-download="<%= encodeURIComponent(doc.downloadLink||'') %>"
                  data-apply="<%= encodeURIComponent(doc.applyLink||'') %>"
                  data-state="<%= encodeURIComponent(doc.state||'') %>"
                  data-dept="<%= encodeURIComponent(doc.department||'') %>"
                  data-guidelines="<%= encodeURIComponent((doc.guidelines||[]).join(', ')) %>"
                  data-reqdocs="<%= encodeURIComponent((doc.requiredDocuments||[]).join(', ')) %>">
                  ✏️ Edit
                </button>

                <form action="/admin/documents/delete/<%= doc._id %>" method="POST" class="inline-delete" style="display:inline">
                  <button type="submit" class="btn btn-danger">🗑 Delete</button>
                </form>
              </div>
            </td>
          </tr>
        <% }) } else { %>
          <tr><td colspan="6" style="text-align:center;padding:18px">No documents found.</td></tr>
        <% } %>
      </tbody>
    </table>

    <!-- Pagination -->
    <% 
      const cur = paginationSafe.currentPage || 1; 
      const total = paginationSafe.totalPages || 1;
      const limit = paginationSafe.limit || 10;
      const pageWindow = 7;
      let start = Math.max(1, cur - Math.floor(pageWindow/2));
      let end = Math.min(total, start + pageWindow - 1);
      start = Math.max(1, end - pageWindow + 1);
    %>

    <div class="pagination" style="padding:12px;">
      <div class="page-info">Page <strong><%= cur %></strong> of <%= total %></div>

      <a class="page-btn" href="?q=<%= encodeURIComponent(filtersSafe.q||'') %>&state=<%= encodeURIComponent(filtersSafe.state||'') %>&dept=<%= encodeURIComponent(filtersSafe.dept||'') %>&sort=<%= encodeURIComponent(filtersSafe.sort||'') %>&limit=<%= limit %>&page=<%= Math.max(1, cur-1) %>" <%= cur<=1 ? 'disabled' : '' %>>Prev</a>

      <% for(let p=start;p<=end;p++){ %>
        <a class="page-btn" href="?q=<%= encodeURIComponent(filtersSafe.q||'') %>&state=<%= encodeURIComponent(filtersSafe.state||'') %>&dept=<%= encodeURIComponent(filtersSafe.dept||'') %>&sort=<%= encodeURIComponent(filtersSafe.sort||'') %>&limit=<%= limit %>&page=<%= p %>"
           style="<%= p===cur ? 'box-shadow:0 8px 24px rgba(0,0,0,.35);background:linear-gradient(180deg,#2f52ff,#3f67ff);color:#fff' : '' %>">
          <%= p %>
        </a>
      <% } %>

      <a class="page-btn" href="?q=<%= encodeURIComponent(filtersSafe.q||'') %>&state=<%= encodeURIComponent(filtersSafe.state||'') %>&dept=<%= encodeURIComponent(filtersSafe.dept||'') %>&sort=<%= encodeURIComponent(filtersSafe.sort||'') %>&limit=<%= limit %>&page=<%= Math.min(total, cur+1) %>" <%= cur>=total ? 'disabled' : '' %>>Next</a>
    </div>
  </div>

  <!-- Add/Edit Panel -->
  <div class="panel">
    <div class="card">
      <h3 id="formHeading">➕ Add New Document</h3>
      <form id="docForm" action="/admin/documents/add" method="POST" novalidate>
        <!-- hidden id for edit -->
        <input type="hidden" name="_id" id="docId" value="">
        <div class="form-grid">
          <div>
            <label for="title" style="display:block;font-weight:700;margin-bottom:6px">Title</label>
            <input id="title" name="title" class="input" required>
          </div>
          <div>
            <label for="department" style="display:block;font-weight:700;margin-bottom:6px">Department</label>
            <input id="department" name="department" class="input" required placeholder="e.g., Education">
          </div>

          <div>
            <label for="state" style="display:block;font-weight:700;margin-bottom:6px">State</label>
            <select id="state" name="state" class="input" required>
              <option value="">Select State</option>
              <% (statesSafe || []).forEach(s => { %>
                <option value="<%= s %>"><%= s %></option>
              <% }) %>
            </select>
          </div>

          <div>
            <label for="downloadLink" style="display:block;font-weight:700;margin-bottom:6px">Download Link (URL)</label>
            <input id="downloadLink" name="downloadLink" class="input" type="url" placeholder="https://">
          </div>

          <div class="col-span-2">
            <label for="description" style="display:block;font-weight:700;margin-bottom:6px">Description</label>
            <textarea id="description" name="description" class="input" required placeholder="Short description of the document"></textarea>
          </div>

          <div class="col-span-2">
            <label for="guidelines" style="display:block;font-weight:700;margin-bottom:6px">Guidelines (one per line or comma-separated)</label>
            <textarea id="guidelines" name="guidelines" class="input" placeholder="e.g., Step 1&#10;Step 2"></textarea>
          </div>

          <div class="col-span-2">
            <label for="requiredDocuments" style="display:block;font-weight:700;margin-bottom:6px">Required Documents (one per line or comma-separated)</label>
            <textarea id="requiredDocuments" name="requiredDocuments" class="input" placeholder="e.g., ID proof, Address proof"></textarea>
          </div>
        </div>

        <div style="display:flex;gap:8px;margin-top:12px;align-items:center">
          <button type="submit" class="btn btn-success" id="saveBtn">💾 Save</button>
          <button type="button" class="btn" id="resetFormBtn">Reset</button>
          <div style="margin-left:auto;color:var(--muted);font-size:13px">Tip: click Edit on any row to populate this form</div>
        </div>
      </form>
    </div>

    <div class="card">
      <h3 id="sideHeading">✏️ Edit / Quick Info</h3>
      <div id="sideContent">
        <p style="color:var(--muted)">Select a document to edit. You can also preview, delete, or export filtered results.</p>
        <hr style="border-color:var(--border)" />
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <a id="quickExport" class="btn btn-primary" href="/admin/documents/export-csv?q=<%= encodeURIComponent(filtersSafe.q||'') %>&state=<%= encodeURIComponent(filtersSafe.state||'') %>&dept=<%= encodeURIComponent(filtersSafe.dept||'') %>">Export filtered CSV</a>
          <button class="btn" id="refreshBtn">↻ Refresh</button>
        </div>

        <div style="margin-top:12px">
          <h4 style="margin:6px 0">Recent documents (this page)</h4>
          <ul style="margin:6px 0 0 18px;color:var(--muted)">
            <% (docs||[]).slice(0,6).forEach(d => { %>
              <li><%= d.title.length>40 ? d.title.slice(0,40)+'…' : d.title %> — <small style="color:var(--muted)"><%= new Date(d.createdAt).toLocaleDateString() %></small></li>
            <% }) %>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Preview Modal -->
<div class="modal" id="previewModal" aria-hidden="true">
  <div class="modal-card" role="dialog" aria-modal="true">
    <div class="modal-header">
      <h3 id="previewTitle">Document</h3>
      <div>
        <button class="btn" id="closeModal">Close</button>
      </div>
    </div>
    <div class="modal-body">
      <p id="previewDesc" style="white-space:pre-wrap"></p>
      <div class="list">
        <h4>Guidelines</h4>
        <ul id="previewGuidelines"></ul>
      </div>
      <div class="list">
        <h4>Required Documents</h4>
        <ul id="previewReqDocs"></ul>
      </div>
      <div style="margin-top:12px;display:flex;gap:8px;flex-wrap:wrap">
        <a id="previewDownload" class="btn btn-primary" target="_blank" rel="noopener noreferrer">⬇️ Download</a>
        <a id="previewApply" class="btn btn-success" target="_blank" rel="noopener noreferrer">📝 Apply Online</a>
      </div>
    </div>
  </div>
</div>

<!-- Toast -->
<div class="toast" id="toast">Saved successfully</div>

<script>
(function(){
  // convenience refs
  const exportCsvBtn = document.getElementById('exportCsv');
  const quickExport = document.getElementById('quickExport');
  const filterForm = document.getElementById('filterForm');
  const clearFiltersBtn = document.getElementById('clearFilters');
  const resetFormBtn = document.getElementById('resetFormBtn');
  const refreshBtn = document.getElementById('refreshBtn');
  const docForm = document.getElementById('docForm');
  const toast = document.getElementById('toast');

  function showToast(msg, timeout=2400){
    toast.textContent = msg;
    toast.classList.add('show');
    setTimeout(()=>toast.classList.remove('show'), timeout);
  }

  // Build URLSearchParams from current filters
  function currentFilterParams(){
    const params = new URLSearchParams(window.location.search);
    return params;
  }

  // Export CSV using current filters
  exportCsvBtn && exportCsvBtn.addEventListener('click', () => {
    const params = currentFilterParams();
    // fallback defaults
    window.location.href = '/admin/documents/export-csv?' + params.toString();
  });

  // quick export link already set server-side; keep it in sync if filter form changes
  filterForm && filterForm.addEventListener('change', () => {
    const params = currentFilterParams();
    quickExport && (quickExport.href = '/admin/documents/export-csv?' + params.toString());
  });

  // Clear filters
  clearFiltersBtn && clearFiltersBtn.addEventListener('click', () => {
    const url = new URL(window.location.href);
    url.searchParams.delete('q'); url.searchParams.delete('state'); url.searchParams.delete('dept');
    url.searchParams.delete('sort'); url.searchParams.delete('page'); url.searchParams.delete('limit');
    window.location.href = url.pathname;
  });

  // Refresh button
  refreshBtn && refreshBtn.addEventListener('click', () => window.location.reload());

  // Utility to decode a possibly encoded dataset value
  function decodeSafe(val){
    try{ return val ? decodeURIComponent(val) : ''; }
    catch(e){ return val || ''; }
  }

  // Preview modal logic
  const previewModal = document.getElementById('previewModal');
  const closeModalBtn = document.getElementById('closeModal');
  const previewTitle = document.getElementById('previewTitle');
  const previewDesc = document.getElementById('previewDesc');
  const previewGuidelines = document.getElementById('previewGuidelines');
  const previewReqDocs = document.getElementById('previewReqDocs');
  const previewDownload = document.getElementById('previewDownload');
  const previewApply = document.getElementById('previewApply');

  document.querySelectorAll('[data-preview]').forEach(btn => {
    btn.addEventListener('click', () => {
      previewTitle.textContent = decodeSafe(btn.dataset.title);
      previewDesc.textContent = decodeSafe(btn.dataset.desc);
      // Guidelines: split on '||' used on server
      const g = decodeSafe(btn.dataset.guidelines || '');
      previewGuidelines.innerHTML = (g ? g.split('||').map(x => '<li>'+x+'</li>').join('') : '<li>—</li>');
      const r = decodeSafe(btn.dataset.reqdocs || '');
      previewReqDocs.innerHTML = (r ? r.split('||').map(x => '<li>'+x+'</li>').join('') : '<li>—</li>');
      previewDownload.href = decodeSafe(btn.dataset.download || '#');
      previewApply.href = decodeSafe(btn.dataset.apply || '#');
      previewModal.classList.add('open');
      previewModal.setAttribute('aria-hidden','false');
    });
  });

  closeModalBtn && closeModalBtn.addEventListener('click', () => {
    previewModal.classList.remove('open');
    previewModal.setAttribute('aria-hidden','true');
  });

  // Fill form for edit
  document.querySelectorAll('[data-edit]').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.dataset.id;
      document.getElementById('formHeading').textContent = '✏️ Edit Document';
      docForm.setAttribute('action', '/admin/documents/edit/' + id);
      // set hidden id
      document.getElementById('docId').value = id;
      document.getElementById('title').value = decodeSafe(btn.dataset.title);
      document.getElementById('department').value = decodeSafe(btn.dataset.dept);
      document.getElementById('state').value = decodeSafe(btn.dataset.state);
      document.getElementById('description').value = decodeSafe(btn.dataset.desc);
      document.getElementById('downloadLink').value = decodeSafe(btn.dataset.download);
      document.getElementById('applyLink') && (document.getElementById('applyLink').value = decodeSafe(btn.dataset.apply) || '');
      // guidelines and req docs sent as comma separated in data-edit
      document.getElementById('guidelines').value = decodeSafe(btn.dataset.guidelines);
      document.getElementById('requiredDocuments').value = decodeSafe(btn.dataset.reqdocs);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  });

  // Add a field for applyLink if not present (for safety)
  if (!document.getElementById('applyLink')) {
    const applyInput = document.createElement('input');
    applyInput.className = 'input';
    applyInput.id = 'applyLink';
    applyInput.name = 'applyLink';
    applyInput.placeholder = 'Apply link (optional)';
    applyInput.type = 'url';
    // put it near downloadLink
    const downloadEl = document.getElementById('downloadLink');
    if (downloadEl && downloadEl.parentNode) {
      downloadEl.parentNode.insertBefore(applyInput, downloadEl.nextSibling);
    }
  }

  // Reset form to "Add New"
  resetFormBtn && resetFormBtn.addEventListener('click', () => {
    docForm.reset();
    docForm.setAttribute('action', '/admin/documents/add');
    document.getElementById('docId').value = '';
    document.getElementById('formHeading').textContent = '➕ Add New Document';
  });

  // Submit form: try AJAX, fallback to normal POST (keeps compatibility)
  docForm && docForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // client-side simple validation
    const title = document.getElementById('title').value.trim();
    const dept = document.getElementById('department').value.trim();
    const state = document.getElementById('state').value;
    const description = document.getElementById('description').value.trim();
    if (!title || !dept || !state || !description) {
      showToast('Please fill required fields (title, department, state, description)');
      return;
    }

    // prepare FormData
    const formData = new FormData(docForm);

    // Normalize guidelines & requiredDocuments to arrays on server-friendly format (comma-separated)
    // If user used newlines, replace with commas
    if (formData.has('guidelines')) {
      formData.set('guidelines', formData.get('guidelines').toString().replace(/\r/g,'').split(/\n+/).map(s=>s.trim()).filter(Boolean).join(', '));
    }
    if (formData.has('requiredDocuments')) {
      formData.set('requiredDocuments', formData.get('requiredDocuments').toString().replace(/\r/g,'').split(/\n+/).map(s=>s.trim()).filter(Boolean).join(', '));
    }

    // try AJAX submit
    const action = docForm.getAttribute('action') || '/admin/documents/add';
    try {
      const resp = await fetch(action, {
        method: 'POST',
        body: formData,
        credentials: 'same-origin'
      });

      // try JSON parse
      const contentType = resp.headers.get('content-type') || '';
      if (contentType.includes('application/json')) {
        const data = await resp.json();
        if (resp.ok) {
          showToast(data.message || 'Saved successfully');
          // reload to reflect changes (could update DOM instead)
          setTimeout(()=>window.location.reload(), 700);
        } else {
          // show validation errors
          showToast(data.message || 'Save failed');
          console.error('save error', data);
        }
      } else {
        // not JSON (server might have redirected or returned HTML) -> reload
        window.location.reload();
      }
    } catch (err) {
      console.error('AJAX submit failed, falling back to form submit', err);
      // fallback: create a normal POST
      docForm.submit();
    }
  });

  // DELETE confirm + AJAX fallback
  document.querySelectorAll('.inline-delete').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (!confirm('Are you sure you want to delete this document? This action cannot be undone.')) return;
      const action = form.getAttribute('action');
      try {
        const resp = await fetch(action, { method: 'POST', credentials: 'same-origin' });
        const ct = resp.headers.get('content-type') || '';
        if (ct.includes('application/json')) {
          const data = await resp.json();
          if (resp.ok) {
            showToast(data.message || 'Deleted');
            // remove row visually or reload
            const row = form.closest('tr');
            if (row) row.remove();
            else setTimeout(()=>window.location.reload(), 300);
          } else {
            showToast(data.message || 'Delete failed');
          }
        } else {
          // fallback reload
          window.location.reload();
        }
      } catch (err) {
        console.error('Delete error', err);
        // fallback
        form.submit();
      }
    });
  });

  // Close preview modal on esc
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && previewModal.classList.contains('open')) {
      previewModal.classList.remove('open');
    }
  });

  // Small UX: clicking outside modal closes it
  previewModal && previewModal.addEventListener('click', (e) => {
    if (e.target === previewModal) previewModal.classList.remove('open');
  });

})();
</script>
  